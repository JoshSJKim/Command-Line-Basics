# Part 6

## Shell Scripts

- Take frequently repeated commands and save them in files to rerun the saved operations as needed by typing a single command.
- These saved commands are called `shell scripts`, but remember that these are actually small programs.

- Some advantages of using `shell scripts`.
  - Increased efficiency
  - Improved accuracy (not having to worry about typos by re-entering same commands repeatedly)
  - Can be shared with colleagues if multiple people are working on a single project (improved consistency)

### Writing Shell Scripts

- Use the `nano` text-editor in the shell to create a `.sh` file in the desired directory (`alkanes` directory is used for this example)
  - `nano middle.sh` will open up the text editor on the shell screen
  - Write the necessary commands and `ctrl + O` save (press enter) and `ctrl + x` to close the editor.
    - `head -n 15 octane.pdb | tail -n 5`
    - This command will retrieve the data lines 11 to 15 in the `octane.pdb` file
  - If the file does not exist, it will be created.

### Executing Shell Scripts

- Once the `.sh` file is saved in the directory, execute the command by entering the following
  - `$ bash middle.sh` or `$ zsh middle.sh`, both works identically in my case.

`NOTE: When writing shell script, make sure to use a plain text editor, or save files as plain text`

### Add Versatility

- `middle.sh` is designated to run only on `octane.pdb` file.
- Make the shell script more versatile by adding a `variable`

`head -n 15 "$1" | tail -n 5`

- `$1` is a special variable inside a shell script that means 'the first filename (or argument) on the command line'
- Run the script by adding a specific argument.

- `$ bash middle.sh octane.pdb` or `$ bash middle.sh pentane.pdb`

- Note: `$1` is surrounded by double quotes just in case the filename passed as the argument contains spaces.

### Add More Versatility

- You can assign multiple 'special' variables to the command.
- `$1`, `$2`, `$3` refers to first, second, and third command line arguments, respectively.

- The following is a modified version of the shell script used in the previous exercise, which will use special variables to define the range of lines to be passed to `head` and `tail`.

`head -n "$2" "$1" | tail -n "$3"`

- Using the shell script above, we could now run the following

`$ bash middle.sh pentane.pdb 15 5`

- `$1`: pentane.pdb
- `$2`: 15
- `$3`: 5

### Add Comments to Shell Scripts

- Add comments to the shell script to provide a brief explanation of the script file.
- This is useful for helping people (and yourself) understand the usage of the script.
- In the shell, comments can be written by using the `#` symbol, and the comment runs to the end of the line
- `#` is required for each comment line. The computer ignores the comments.

```zsh
# Select lines from the middle of a file.
# Usage: bash middle.sh filename end_line_num num_lines
head -n "$2" "$1" | tail -n "$3"
```

- Note: It is important to update the comments as necessary when script edits are made.

### Process Multiple Files

- If it is necessary to process multiple unknown files in a single pipeline, we cannot use `$1`, `$2`, etc. since the arguments are unknown.
- use `$@`, which means 'all the command-line arguments to the shell script'.

- create a shell script file called `sorted.sh`

`nano sorted.sh`

```zsh
# Sort files by their length.
# Usage: bash sorted.sh one_or_more_filenames
wc -l "$@" | sort -n
```

- `wc -l` will count the lines of each file that corresponds to the arguments passed, then it will sort the processed files in numerical order (`sort -n`)

`bash sorted.sh *.pdb ../creatures/*.dat`

- The above command will execute `sorted.sh` on all files that have `.pdb` extension in the current working directory, as well as all files that have `.dat` file extension in the `creatures` directory (`..` moves up one directory)

Another Example

```zsh
$ nano species.sh

# Script to find unique species in .csv files where species is the second data field.
# This script accepts any number of file names as command line argument.

# Loop over all files
for file in $@
do
    echo "Unique species in $file:"
    # Extract species names
    cut -d , -f 2 $file | sort | uniq
done
```

### Use 'history' to Create A Script

- If you've written a few lines of commands to accomplish something, and it seems worth saving for later purposes, use the `history` command to recall previous lines of commands and save them to a script file.

`$ history | tail -n 5 > redo-figure-3.sh`

- `redo-figure-3.sh` will now contain the following (this is just an example)

```zsh
297 bash goostats.sh NENE01729B.txt stats-NENE01729B.txt
298 bash goodiff.sh stats-NENE01729B.txt /data/validated/01729.txt > 01729-differences.txt
299 cut -d ',' -f 2-3 01729-differences.txt > 01729-time-series.txt
300 ygraph --format scatter --color bw --borders none 01729-time-series.txt figure-3.png
301 history | tail -n 5 > redo-figure-3.sh
```

- open up `redo-figure-3.sh` and edit out the line numbers and the last line where `history` command was called.
- Now you have an accurate record of the useful command sequence.

- NOTE: The shell ALWAYS adds commands to the log BEFORE running it. This is because if a command causes something to crash or hang, it would be useful to know what that command was for investigative purposes.

