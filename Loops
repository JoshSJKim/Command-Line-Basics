# Part 5

## Loops

- `Loops` are a programming construct that allows a command or set of commands to be repeated for each item in a list.
- It is key to improved productivity through automation.
- Similar to `wildcards` and `tab completion`, `loops` also reduce the amount of typing required (also reducing typing mistakes)

- Below is a pseudo-code for a `for` loop used in the shell

```zsh
# The word "for" indicates the beginning of a 'for-loop' command
for 'thing' in 'list-of-things'
# The word 'do' indicates the start of job execution list
do
    # Indentation within a loop is not required, but improves readability
    operation_using/command $thing
# The word "done" indicates the end of a loop
done
```

- Below is an actual example of a for loop applied on ~/Desktop/shell-lesson-data/exercise-data/creatures

```zsh
$ for filename in basilisk.dat minotaur.dat unicorn.dat
> do                                    # Note that 'shift + Enter' can be used to write multiline commands
>     echo $filename                    # Or use a semi-colon to separate each line of command
>     head -n 2 $filename | tail -n 1   # In this command 'filename' is assigned as a variable by putting a '$' before it.
> done
```

- The above command will generate the following output

```zsh
basilisk.dat
CLASSIFICATION: basiliscus vulgaris
minotaur.dat
CLASSIFICATION: bos hominus
unicorn.dat
CLASSIFICATION: equus monoceros
```

- Note that the `$` symbol and the `>` symbol has different meanings under different circumstances.
- If the shell prints `$` or `>`, it is expecting an input from the user, which means the symbol is a prompt.
- If the user types `$` or `>`, it is an instruction entered by the user for the shell to redirect or retrieve a value of a variable.

- Another thing to note is that it is possible to put the variable names in curly braces to clearly indicate the variable name.
- `$filename` is equivalent to `${filename}`.
- Remember to name variables that are relevant to the reader's understanding. It is better practice.

### Saving to a File in a Loop

- There are two ways of saving to a file in a loop.
- You could use the `>` redirect, or `>>` append.

```zsh
for alkanes in *.pdb
  do
    echo $alkanes
    cat $alkanes > alkanes.pdb
  done
```

- The above code uses the `>` redirect operator to create a new file called `alkanes.pdb`.
- It will display the name of each file in `~/Desktop/shell-lesson-data/exercise-data/alkanes` on the shell screen
- Then it will write the data contents of each file to the newly created file called `alkanes.pdb`.
- However, since `>` redirect overwrites the previous data, the final result of `alkanes.pdb` after the loop will only contain the data from the last file iterated.

```zsh
for database in *.pdb
  do
    cat $database >> all.pdb
  done
```

- The above code uses the `>>` append operator.
- It will concatenate the data content of each file in the same directory path to a newly created file called 'all.pdb`.

### Using a Loop to Save Backup Files

```zsh
for filename in *.dat   # Iterate through all filenames that have .dat extension
  do
      cp $filename original-$filename # Make a copy of the $filename with a new name 'original-$filename'
  done
```

- Since the `cp` command does not normally produce any output on the shell screen, it is difficult to know fi the loop is working properly.
- We could use the `echo` command as a debugging tool to check if the output of the loop will be what is expected, without actually running the command.

```zsh
for filename in *.dat
  do
    echo $filename original-$filename
  done
```

- The above command will print the following

```zsh
cp basilisk.dat original-basilisk.dat
cp minotaur.dat original-minotaur.dat
cp unicorn.dat original-unicorn.dat
```

- We could confirm that the output is what is expected. Go ahead and remove the `echo` and execute the loop.

### How to Run Shell Scripts in a Loop

- Using `~/Desktop/shell-lesson-data/north-pacific-gyre` as an example, we want to run the `goostats.sh` shell script file included in the `north-pacific-gyre` directory.
- The script calculates some stats from the `.txt` files in the directory. It takes to arguments.
  - input file (raw data)
  - output file (to store calculated stats)

- Make sure to select the right input files (files that end in 'A' or 'B', not 'Z')
- Once in the correct directory, run the following loop

```zsh
for datafile in NENE*A.txt NENE*B.txt
  do
      echo $datafile
  done
```

- This will print all `.txt` files that begin with `NENE` and end in `A` or `B`, with zero or more of any characters in between.

- We can use the above for loop statement as a base to make it `do` something else. We need to create an output file, where the calculated stats will be stored.
- Use `echo` again to make sure that the loop will do what it is expected to do.

```zsh
for datafile in NENE*A.txt NENE*B.txt
  do
      echo $datafile stats-$datafile
  done
```

- This will print the `$datafile` name, as well as its corresponding output file name.
- We haven't even touched the `goostats.sh` file yet, but it is ready to run.

- Use the 'up' cursor to redisplay the previous command entered.
  - It will be displayed in a single line, separated by semi-colons.
  - Navigate to the `echo` command with the cursor and replace it with `bash goostats.sh` (or `zsh goostats.sh` in my case, but it doesn't really matter).
- But this will not print anything to the shell screen. You can't really tell if the loop is running properly, or running at all, and how long it takes.
- Add `echo $datafile` right after `do` in order to print what is going on as the loop iterates. It will serve as a debugger.
- NOTE: If at anytime you are not sure if the loop or command is running properly, exit the loop by entering `Ctrl + C`

```zsh
for datafile in NENE*A.txt NENE*B.txt
  do
      echo $datafile
      bash $datafile stats-$datafile
  done
```

- The above code will run the shell script on each of the specified files in the directory and store its output data in `stats-$datafile`, which will be saved int he same directory.
- Use `$ cat NENE[any file].txt` to check if the output is good.

- NOTE: Use `Ctrl + A` to move to the beginning of a line and `Ctrl + E` to move to the end of a line.

### Other Methods to Recall Previous Commands

#### History

- use the `history` command to retrieve a specified number of previously entered commands

- `$ history | tail -n 5` will recall the previous 5 commands that have been entered.
- If you identify a command that you need repeating, simply enter `! + commandLineNumber`

#### Ctrl + R

- `Ctrl + R` opens up a 'history search mode' and finds the most recent command in the history that matches the text entered.
- Press `Ctrl + R` one or more times to search for earlier matches. Then use the cursor to navigate and edit the command, and hit `Return` to execute.

#### Others

- `!!` has the same function as the `up` cursor.
- `!$` retrieves the last word of the last command.
  - for example, after `bash goostats.sh NEN01729B.txt stats-NENE01729B.txt`, type `less !$` to look at the file `stats-NENE01729B.txt`.

### Nested Loops

- You can nest loops

```zsh
for species in cubane ethane methane
do
    for temperature 25 30 37 40
    do
        mkdir $species-$temperature
    done
done
```

- The above loop will create directories for each $species in each $temperature group

## Summary

- A `for` loop repeats commands once for every 'thing' in a list
- Every `for` loop needs a variable to refer to the 'thing' it is currently operating on.
- Use `$name` or `${name}` to expand a variable (get its value)
- Do not use spaces, quotes, wildcard characters in filenames (it'll just cause headaches)
- Use the `up` cursor to redisplay previous commands.
- Use `Ctrl + R` to search for previous commands
- Use `history` command to display recent commands and retrieve using the line number
