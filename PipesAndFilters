# Part 4

## Introduction

- With the knowledge of few basic commands, we could now look at the shell's most powerful feature: The ability to combine existing programs in new ways.

### wc (Word Count)

- in `~/Desktop/shell-lesson-data/exercise-data/alkanes`, entering the command `$ wc cubane.pdb` will list the number of lines words, and characters in files.
  - `20 156 1158 cubane.pdb`
- `$ wc *.pdb` will list count information of all files in the current working directory with a `.pdb` extension, and it also includes the `total` number of all counts in the last line of the output.
- `-l` option will list only the `line count`
- `-m` option will list only the `character count`
- `-w` option will list only the `word count`

- If the command is supposed to process a file but a file to be processed is not specified, for example `$ wc -l`, `wc` assumes it is supposed to process input given at the command prompt (in other words, it is actively doing nothing, waiting for an input).
- If you are stuck in this state, press `Ctrl+C`.

## Capturing Output From Commands

### Redirect (`>`)

- The greater-than symbol is a `redirect` command.
- It tells the shell to `redirect` the command's output to a file instead of printing it on the screen (This command does not print a screen output since the output has been redirected to a specified file)

`$ wc -l *.pdb > lengths.txt`

- The above command will count the number of lines in all files with the `.pdb` extension in the current working directory and redirect (`>`) the output to a file named 'lengths.txt'.
- If such file does not exist, the shell will create the file at the time of redirect.
- If it already exists, the existing file will be 'silently' overwritten. (possible data loss. Use caution with `redirect`)

- Use the `cat` command (derived from 'concatenate') to print the contents of the specified file. If there are multiple files, the `cat` command will print the contents of the file one after the other.
- One disadvantage of `cat` is that it dumps the entire file(s) on the screen.
- In order to view the output page one page at a time, use the `less` command --> `less lengths.txt`
  - This command will display only a screenful of screen at a time.
    - `Spacebar` to move down the screen
    - `B` to move up the screen.
    - `Q` to quit

## Filtering Output

### Sort

- the `sort` command by default sorts data alphanumerically, which may cause some problems if we're dealing with numerical data.
- use the `-n` option to sort numerical data

- `$ sort -n lengths.txt` will list the sorted results on the screen. It does not modify the file itself. It simply prints the results.

- Just like the output data from `$ wc *.pdb` was redirected to `lengths.txt`, the output data from `$ sort -n lengths.txt` can be redirected to a new file

`$ sort -n lengths.txt > sorted-lengths.txt`

- From here, we could use the `head` command to print a desired number of information on the screen.

- `$ head -n 1 sorted-lengths.txt` will list the first line of the file. The number of lines to be displayed can be specified after the `-n` option

NOTE: Do not redirect an output data to the same file. This may lead to incorrect results or lost data.

### `>>` (Append)

- Redirect operator (`>`) overwrites data to a specified file.
- The `append (>>)` operator works similarly (in that it could create a new file to save to) but rather than overwriting, it appends the new data to a specified file if it already exists.

### Heads or Tails

- Previous exercise explained how the `head` command works. It prints lines from the start of the file.
- `tail` command works in the opposite manner. It prints lines from the end of the file.

### Passing Output to Another Command

- Use `pipes` to eliminate the need for multiple 'intermediate' files (`sorted-lengths.txt` in the previous example) using redirect
- `|` tells the shell to use the output of the command on the left as the input to the command on the right.

`$ sort -n lengths.txt | head -n 1` --> sort the contents of lengths.txt in numerical order and return the first line of the sorted contents.

### Combining Multiple Commands

- Multiple commands can be chained together to get the result from the previous example without any intermediate files.

`$ wc -l *.pdb | sort -n`

- Retrieve the line count from all files with the extension .pdb and sort it in a numerical order.

`$ wc -l *.pdb | sort -n | head -n 1`

- Return the first line of the sorted data.